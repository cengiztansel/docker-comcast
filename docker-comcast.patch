diff --git a/comcast.go b/comcast.go
index a300611..a8d883b 100644
--- a/comcast.go
+++ b/comcast.go
@@ -1,13 +1,16 @@
 package main
 
 import (
+	"bytes"
 	"flag"
 	"fmt"
 	"net"
 	"os"
+	"os/exec"
 	"strconv"
 	"strings"
 
+	"github.com/samalba/dockerclient"
 	"github.com/tylertreat/comcast/throttler"
 )
 
@@ -16,6 +19,7 @@ const version = "1.0.0"
 func main() {
 	// TODO: Add support for other options like packet reordering, duplication, etc.
 	var (
+		cont        = flag.String("cont", "", "Container ID or name to get virtual interface of")
 		device      = flag.String("device", "", "Interface (device) to use (defaults to eth0 where applicable)")
 		stop        = flag.Bool("stop", false, "Stop packet controls")
 		latency     = flag.Int("latency", -1, "Latency to add in ms")
@@ -38,6 +42,48 @@ func main() {
 
 	targetIPv4, targetIPv6 := parseAddrs(*targetaddr)
 
+	// Probably don't want to apply to eth0 by default when in a container
+	if *cont == "" && *device == "" {
+		fmt.Println("Must specify container or device")
+		os.Exit(1)
+	}
+	if *cont != "" {
+		if *device != "" {
+			fmt.Println("Cannot specify container and device")
+			os.Exit(1)
+		}
+		endpoint := "unix:///var/run/docker.sock"
+		docker, err := dockerclient.NewDockerClient(endpoint, nil)
+		if err != nil {
+			fmt.Println("Couldn't connect to docker socket:", err)
+			os.Exit(1)
+		}
+		container, err := docker.InspectContainer(*cont)
+		if err != nil {
+			fmt.Println("Couldn't inspect container:", err)
+			os.Exit(1)
+		}
+		pid := container.State.Pid
+		if pid < 2 {
+			fmt.Println("Couldn't find process id for container")
+			os.Exit(1)
+		}
+		cmd := exec.Command("findveth.sh", strconv.Itoa(pid))
+		var outbuf bytes.Buffer
+		var errbuf bytes.Buffer
+		cmd.Stdout = &outbuf
+		cmd.Stderr = &errbuf
+		err = cmd.Run()
+		outstr := outbuf.String()
+		errstr := errbuf.String()
+		if err != nil {
+			fmt.Println("Failed to find interface:", err, outstr, errstr)
+			os.Exit(1)
+		}
+		*device = strings.TrimSpace(outstr)
+		fmt.Println("Found interface %s for container '%s'", *device, *cont)
+	}
+
 	throttler.Run(&throttler.Config{
 		Device:           *device,
 		Stop:             *stop,
